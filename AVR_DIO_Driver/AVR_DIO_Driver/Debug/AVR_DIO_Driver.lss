
AMIT_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6d  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e5  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e65  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000145f  00000000  00000000  00002e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000042fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  74:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Dio_PinSetDirection>:
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	31 f1       	breq	.+76     	; 0xcc <Dio_PinSetDirection+0x50>
  80:	38 f0       	brcs	.+14     	; 0x90 <Dio_PinSetDirection+0x14>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	09 f4       	brne	.+2      	; 0x88 <Dio_PinSetDirection+0xc>
  86:	40 c0       	rjmp	.+128    	; 0x108 <Dio_PinSetDirection+0x8c>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <Dio_PinSetDirection+0x12>
  8c:	5a c0       	rjmp	.+180    	; 0x142 <Dio_PinSetDirection+0xc6>
  8e:	76 c0       	rjmp	.+236    	; 0x17c <Dio_PinSetDirection+0x100>
	{
		case A:
		if (PinDirection == PinInput) ClearBit(DDRA,PinNumber);
  90:	41 11       	cpse	r20, r1
  92:	0d c0       	rjmp	.+26     	; 0xae <Dio_PinSetDirection+0x32>
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <Dio_PinSetDirection+0x24>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <Dio_PinSetDirection+0x20>
  a4:	80 95       	com	r24
  a6:	82 23       	and	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	70 c0       	rjmp	.+224    	; 0x18e <Dio_PinSetDirection+0x112>
	switch (port)
	{
		case A:
		if (PinDirection == PinInput) ClearBit(DDRA,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRA,PinNumber);
  ae:	41 30       	cpi	r20, 0x01	; 1
  b0:	09 f0       	breq	.+2      	; 0xb4 <Dio_PinSetDirection+0x38>
  b2:	66 c0       	rjmp	.+204    	; 0x180 <Dio_PinSetDirection+0x104>
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <Dio_PinSetDirection+0x44>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <Dio_PinSetDirection+0x40>
  c4:	82 2b       	or	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	61 c0       	rjmp	.+194    	; 0x18e <Dio_PinSetDirection+0x112>
		else if (PinDirection == PinOutput) SetBit(DDRA,PinNumber);
		else ReturnValue = NOK ; 
		
		break;
		case B:
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
  cc:	41 11       	cpse	r20, r1
  ce:	0d c0       	rjmp	.+26     	; 0xea <Dio_PinSetDirection+0x6e>
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Dio_PinSetDirection+0x60>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Dio_PinSetDirection+0x5c>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	52 c0       	rjmp	.+164    	; 0x18e <Dio_PinSetDirection+0x112>
		else ReturnValue = NOK ; 
		
		break;
		case B:
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	09 f0       	breq	.+2      	; 0xf0 <Dio_PinSetDirection+0x74>
  ee:	4a c0       	rjmp	.+148    	; 0x184 <Dio_PinSetDirection+0x108>
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <Dio_PinSetDirection+0x80>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <Dio_PinSetDirection+0x7c>
 100:	82 2b       	or	r24, r18
 102:	87 bb       	out	0x17, r24	; 23
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	43 c0       	rjmp	.+134    	; 0x18e <Dio_PinSetDirection+0x112>
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
 108:	41 11       	cpse	r20, r1
 10a:	0d c0       	rjmp	.+26     	; 0x126 <Dio_PinSetDirection+0xaa>
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <Dio_PinSetDirection+0x9c>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <Dio_PinSetDirection+0x98>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	34 c0       	rjmp	.+104    	; 0x18e <Dio_PinSetDirection+0x112>
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	79 f5       	brne	.+94     	; 0x188 <Dio_PinSetDirection+0x10c>
 12a:	24 b3       	in	r18, 0x14	; 20
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_PinSetDirection+0xba>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_PinSetDirection+0xb6>
 13a:	82 2b       	or	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	26 c0       	rjmp	.+76     	; 0x18e <Dio_PinSetDirection+0x112>
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
 142:	41 11       	cpse	r20, r1
 144:	0d c0       	rjmp	.+26     	; 0x160 <Dio_PinSetDirection+0xe4>
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <Dio_PinSetDirection+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <Dio_PinSetDirection+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	17 c0       	rjmp	.+46     	; 0x18e <Dio_PinSetDirection+0x112>
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRD,PinNumber);
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	a1 f4       	brne	.+40     	; 0x18c <Dio_PinSetDirection+0x110>
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <Dio_PinSetDirection+0xf4>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <Dio_PinSetDirection+0xf0>
 174:	82 2b       	or	r24, r18
 176:	81 bb       	out	0x11, r24	; 17
	asm	volatile ("nop");  
	return ReturnValue;
}
ReturnValueType Dio_PinSetDirection (PortType port , uint8 PinNumber,PinDirectionType PinDirection)
{
	ReturnValueType  ReturnValue = OK;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	09 c0       	rjmp	.+18     	; 0x18e <Dio_PinSetDirection+0x112>
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	07 c0       	rjmp	.+14     	; 0x18e <Dio_PinSetDirection+0x112>
	switch (port)
	{
		case A:
		if (PinDirection == PinInput) ClearBit(DDRA,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRA,PinNumber);
		else ReturnValue = NOK ; 
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	05 c0       	rjmp	.+10     	; 0x18e <Dio_PinSetDirection+0x112>
		
		break;
		case B:
		if (PinDirection == PinInput) ClearBit(DDRB,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRB,PinNumber);
		else ReturnValue = NOK ;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	03 c0       	rjmp	.+6      	; 0x18e <Dio_PinSetDirection+0x112>
		break;
		case C:
		if (PinDirection == PinInput) ClearBit(DDRC,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRC,PinNumber);
		else ReturnValue = NOK ;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	01 c0       	rjmp	.+2      	; 0x18e <Dio_PinSetDirection+0x112>
		break;
		case D:
		if (PinDirection == PinInput) ClearBit(DDRD,PinNumber);
		else if (PinDirection == PinOutput) SetBit(DDRD,PinNumber);
		else ReturnValue = NOK ;
 18c:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
 18e:	00 00       	nop
	return ReturnValue;
}
 190:	08 95       	ret

00000192 <main>:
	SetBit(TIMSK,TOIE1);	// Enable timer1 overflow interrupt
	sei();
	*/
	
	//timer 2 servo
	Dio_PinSetDirection(D,7,PinOutput);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	67 e0       	ldi	r22, 0x07	; 7
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 3e 00 	call	0x7c	; 0x7c <Dio_PinSetDirection>
	SetBit(TCCR2,WGM20);SetBit(TCCR2,WGM21);//fast pwm
 19c:	85 b5       	in	r24, 0x25	; 37
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	85 bd       	out	0x25, r24	; 37
 1a2:	85 b5       	in	r24, 0x25	; 37
 1a4:	88 60       	ori	r24, 0x08	; 8
 1a6:	85 bd       	out	0x25, r24	; 37
	ClearBit(TCCR2,COM20);SetBit(TCCR2,COM21);//select non inverted mode
 1a8:	85 b5       	in	r24, 0x25	; 37
 1aa:	8f 7e       	andi	r24, 0xEF	; 239
 1ac:	85 bd       	out	0x25, r24	; 37
 1ae:	85 b5       	in	r24, 0x25	; 37
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	85 bd       	out	0x25, r24	; 37
	OCR2=5;
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	83 bd       	out	0x23, r24	; 35
	SetBit(TCCR2,CS20);SetBit(TCCR2,CS21);SetBit(TCCR2,CS22);//prescaler 1024
 1b8:	85 b5       	in	r24, 0x25	; 37
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	85 bd       	out	0x25, r24	; 37
 1be:	85 b5       	in	r24, 0x25	; 37
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	85 bd       	out	0x25, r24	; 37
 1c4:	85 b5       	in	r24, 0x25	; 37
 1c6:	84 60       	ori	r24, 0x04	; 4
 1c8:	85 bd       	out	0x25, r24	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	81 ee       	ldi	r24, 0xE1	; 225
 1ce:	94 e0       	ldi	r25, 0x04	; 4
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x3e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x48>
 1da:	00 00       	nop
		_delay_ms(1000);		
		} */	
		
		//timer 2 servo
		_delay_ms(100);
		OCR2++;
 1dc:	83 b5       	in	r24, 0x23	; 35
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	83 bd       	out	0x23, r24	; 35
		if(OCR2==50){
 1e2:	83 b5       	in	r24, 0x23	; 35
 1e4:	82 33       	cpi	r24, 0x32	; 50
 1e6:	89 f7       	brne	.-30     	; 0x1ca <main+0x38>
			c=1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				if (OCR2==5)
				{
					c=0;
				}
			}
			OCR2=5;
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	83 bd       	out	0x23, r24	; 35
 1f2:	eb cf       	rjmp	.-42     	; 0x1ca <main+0x38>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
